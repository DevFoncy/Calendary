/**
 *
 * {{properCase name }}
 *
 */

import React, { Fragment} from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
{{#if wantHeaders}}
import { Helmet } from 'react-helmet';
{{/if}}
{{#if wantMessages}}
import { FormattedMessage } from 'react-intl';
{{/if}}
{{#if wantActionsAndReducer}}
import { createStructuredSelector } from 'reselect';
{{/if}}
import { compose } from 'redux';

{{#if wantSaga}}
import injectSaga from 'utils/injectSaga';
{{/if}}
{{#if wantActionsAndReducer}}
import injectReducer from 'utils/injectReducer';
import makeSelect{{properCase name}} from './selectors';
import reducer from './reducer';
{{/if}}

{{#if wantLessFiles}}
import './index.less';
{{/if}}

{{#if wantSaga}}
import saga from './saga';
{{/if}}

{{#if wantMessages}}
import messages from './messages';
{{/if}}

export class {{ properCase name }} extends React.Component{
  constructor(props) {
    super(props);
    this.state = {

    };
  };

  componentDidMount() {

  }

   componentWillUnmount() {

   }

  render() {
    return (
        <Fragment>
        {{#if wantHeaders}}
          <Helmet>
            <title>{{properCase name}}</title>
            <meta name="description" content="Description of {{properCase name}}" />
          </Helmet>
        {{/if}}
           <div className='{{ properCase name }}'>

           </div>
        </Fragment>
      );
  }
}

{{ properCase name }}.propTypes = {
  dispatch: PropTypes.func.isRequired,
};

{{#if wantActionsAndReducer}}
const mapStateToProps = createStructuredSelector({
  {{ camelCase name }}: makeSelect{{properCase name}}(),
});
{{/if}}

function mapDispatchToProps(dispatch) {
  return {
    dispatch,
  };
}

{{#if wantActionsAndReducer}}
const withConnect = connect(mapStateToProps, mapDispatchToProps);
{{else}}
const withConnect = connect(null, mapDispatchToProps);
{{/if}}

 {{#if wantActionsAndReducer}}
     const withReducer = injectReducer({  key: '{{ camelCase name }}', reducer });
 {{/if}}
 {{#if wantSaga}}
     const withSaga = injectSaga({  key: '{{ camelCase name }}', saga });
 {{/if}}

export default compose(
  withConnect,
  {{#if wantActionsAndReducer}}
    withReducer,
  {{/if}}
  {{#if wantSaga}}
    withSaga,
  {{/if}}
  {{#if memo}}
    memo,
  {{/if}}
)({{ properCase name }});
